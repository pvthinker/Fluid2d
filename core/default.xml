<?xml version = "1.0" encoding="UTF-8" standalone="yes" ?>
<Fluid2D> 

  <parameters type="general">
    <name value="modelname">
      <type>str</type>
      <default>advection</default>
      <avail>advection,euler,boussinesq,quasigeostrophic,thermalwind</avail>
      <doc>Type of model equations</doc>
    </name>
    <name value="expname">
      <type>str</type>
      <default>myexp</default>
      <doc>Name of the experiment. Gives the prefix to the netcdf output files:  "*_his.nc" which contains the history (2D snapshots) and "*_diag.nc" which contains integrals timeseries (energy, enstrophy, vorticity etc.)</doc>
    </name>
  </parameters>

  <parameters type="numerics">
    <name value="timestepping">
      <type>str</type>
      <default>RK3_SSP</default>
      <avail>EF,LF,Heun,RK3_SSP,AB2,AB3,LFAM3,RK4_LS</avail>
      <doc>Time scheme. </doc>
    </name>
    <name value="order">
      <type>int,long</type>
      <default>5</default>
      <doc>Order of the advective flux discretization. Should be in [1,2,3,4,5]. 1, 3, 5 are upwind fluxes ; 2, 4 are centered fluxes. Upwind fluxes naturally provide enough dissipation to the code. Centered fluxes require to activate the diffusion/viscosity to smooth out the noise at the grid scale.</doc>
    </name>
    <name value="aparab">
      <type>float</type>
      <default>0.05</default>
      <doc>Coefficient used to define the parabolic flux splitting</doc>
    </name>
    <name value="flux_splitting_method">
      <type>str</type>
      <default>parabolic</default>
      <avail>minmax,parabolic</avail>
      <doc>Advective Flux Splitting Method. 'minmax' is the usual basic one, 'parabolic' is a regularized one that provides better solutions</doc>
    </name>
    <name value="nh">
      <type>int,long</type>
      <default>3</default>
      <doc>Number of ghost points in the halo</doc>
    </name>
  </parameters>

  <parameters type="time">
    <name value="adaptable_dt">
      <type>bool</type>
      <default>True</default>
      <doc>If True: the time step is recomputed in realtime according to param.cfl. If False: the model uses the constant param.dt time step. </doc>
    </name>
    <name value="dt">
      <type>float</type>
      <default>0.1</default>
      <doc>Model time step if param.adaptable_dt == False</doc>
    </name>
    <name value="cfl">
      <type>float</type>
      <default>0.5</default>
      <doc>Desired cfl that sets the time step in the case param.adaptable_dt == True. dt is computed in core/fluid2d.py using dt = cfl*dx/max|u|.</doc>
    </name>
    <name value="dtmax">
      <type>float</type>
      <default>5.</default>
      <doc>Maximum time step of the model. It is import to control it for accelerated flows starting from the rest state or for flows where the stability is dominated by waves propagation (internal waves or Rossby waves)</doc>
    </name>
    <name value="rescaledtime">
      <type>str</type>
      <avail>none,enstrophy</avail>
      <default>none</default>
      <doc lang='en'>
        Measure time with either the model time (none) or a rescaled time (enstrophy)
      </doc>
    </name>
    <name value="ninterrestart">
      <type>int,long</type>
      <default>1</default>
      <doc>Number of restart outputs during the integration. </doc>
    </name>
  </parameters>

  <parameters type="domain and resolution">
    <name value="nx">
      <type>int,long</type>
      <default>128</default>
      <doc>Number of gridpoints in x direction in the global grid. It has to be a power of 2.</doc>
    </name>
    <name value="ny">
      <type>int,long</type>
      <default>128</default>
      <doc>Number of gridpoints in y direction in the global grid. It has to be a power of 2.</doc>
    </name>
    <name value="Lx">
      <type>float</type>
      <default>1.</default>
      <doc>Domain length along x. x-axis ranges from 0 to Lx.</doc>
    </name>
    <name value="Ly">
      <type>float</type>
      <default>1.</default>
      <doc>Domain length along y. y-axis ranges from 0 to Ly.</doc>
    </name>
    <name value="geometry">
      <type>str</type>
      <avail>disc,perio,closed,ychannel,xchannel</avail>
      <default>disc</default>
      <doc lang='en'>
        Domain shape. It offers a list of predefined masks. You may change the mask in your script. See for instance experiments/Vortex/vortex.py for an example.
      </doc>
    </name>
    <name value="isisland">
      <type>bool</type>
      <default>False</default>
      <doc lang='en'>
        Activate to impose non-zero streamfunction along certain boundaries
      </doc>
    </name>
    <name value="mpi">
      <type>int</type>
      <default>0</default>
      <doc lang='en'>
        Whether mpi is activated or not. If npx*npy>1 the code should be executed with mpirun -np #cores python myexp.py, where #cores=npx*npy.
      </doc>
    </name>
    <name value="myrank">
      <type>int</type>
      <default>0</default>
      <doc lang='en'>
        MPI rank of the process, working on the rank-th subdomain. When npx*npy == 1, myrank is zero.
      </doc>
    </name>
    <name value="npx">
      <type>int</type>
      <default>1</default>
      <doc lang='en'>
        Number of subdomains (cores) in x. It has to be a power of 2.
      </doc>
    </name>
    <name value="npy">
      <type>int</type>
      <default>1</default>
      <doc lang='en'>
        Number of subdomains (cores) in y. It has to be a power of 2.
      </doc>
    </name>
  </parameters>


  <parameters type="plotting options">
    <name value="plot_interactive">
      <type>bool</type>
      <default>True</default>
      <doc>Set on the interactive plotting. Turn it off to speed up the computation</doc>
    </name>
    <name value="imshow_interpolation">
      <type>str</type>
      <default>nearest</default>
      <avail>nearest,bilinear</avail>
      <doc>Interpolation scheme for the imshow rendering</doc>
    </name>
    <name value="plot_psi">
      <type>bool</type>
      <default>False</default>
      <doc>Add iso-contours of psi (streamfunction) during the interactive plot</doc>
    </name>
    <name value="plot_ua">
      <type>bool</type>
      <default>False</default>
      <doc>Add quiver of the ageostrophic velocity ('qg' model only)</doc>
    </name>
    <name value="plot_pvback">
      <type>bool</type>
      <default>False</default>
      <doc>Add iso-contours of pvback, the background pv ('qg' model)</doc>
    </name>
    <name value="freq_plot">
      <type>int,long</type>
      <default>10</default>
      <doc>Number of iterations between two plotting update. This sets the smoothness of the animation. Refreshing too often will slow down the computation.</doc>
    </name>
    <name value="generate_mp4">
      <type>bool</type>
      <default>False</default>
      <doc>Generate a mp4 video file on the fly. Need to have 'avconv' or 'ffmpeg' installed.</doc>
    </name>
    <name value="colorscheme">
      <type>str</type>
      <default>minmax</default>
      <avail>minmax,symmetric,imposed</avail>
      <doc>Method to adjust the colorscale. 'minmax': time varying colorscale following the min and max of the field ; 'symmetric': same as 'minmax' but with the additional constraint that the scale is centered around zero ; 'imposed': the colorscale is imposed in param.cax</doc>
    </name>
    <name value="cmap">
      <type>str</type>
      <default>RdBu_r</default>
      <doc>set the colormap, needs to be in the pyplot list, see: matplotlib.pyplot.cm.cmap_d.keys()</doc>
    </name>
    <name value="plotting_module">
      <type>str</type>
      <default>plotting</default>
      <doc>give the name of your plotting module (python script). It should look like core/plotting.py</doc>
    </name>
  </parameters>

  <parameters type="output">
    <name value="datadir">
      <type>str</type>
      <default>~/data/fluid2d</default>
      <doc>Folder where to store the outputs. Typically a storage disk, not the $HOME. The default is $HOME/data/fluid2d</doc>
    </name>
    <name value="expdir">
      <type>str</type>
      <default>none</default>
      <doc>Folder where the experiment outputs are saved. This folder is automatically created by the code.</doc>
    </name>
    <name value="var_to_save">
      <type>str</type>
      <default>vorticity</default>
      <doc>List of variables names that we want to output in the history file. The variables names have to be consistent with the model</doc>
    </name>
    <name value="list_diag">
      <type>str</type>
      <default>all</default>
      <doc>List of variables names that we want to output in the diagnostic file. The variables names have to be consistent with the model. If 'all', store them all.</doc>
    </name>
    <name value="custom_diag">
      <type>str</type>
      <default>none</default>
      <doc>Dictionary of custom diagnostics that are added to the diagnostic file. The keys are the names under which the diagnostics are saved. The values of the dictionary are functions that are called at every time diagnostics are evaluated. The functions take as only argument the current state of the model and return a single value (float).</doc>
    </name>
    <name value="nprint">
      <type>int,long</type>
      <default>20</default>
      <doc>Number of time steps between two prints of iteration / time step</doc>
    </name>
    <name value="freq_his">
      <type>float</type>
      <default>1.</default>
      <doc>Interval of time between two outputs in the history file</doc>
    </name>
    <name value="exacthistime">
      <type>bool</type>
      <default>True</default>
      <doc>Adjust the time step so that history I/O is done at exact desired time. This may hurt the smoothness of the run. In particular the dissipation of enstrophy and energy may have little jumps.</doc>
    </name>
    <name value="freq_diag">
      <type>float</type>
      <default>1.</default>
      <doc>Interval of time between two output in the diag file</doc>
    </name>
  </parameters>

  <parameters type="physics">
    <name value="hydroepsilon">
      <type>float</type>
      <default>1.</default>
      <doc>Parameter controlling the transition between hydro/non-hydro. 1 = non-hydrostatic, 0 = strictly hydrostatic (unstable), minimal value 0.2. Only works with 'boussinesq' and 'thermalwind' models.</doc>
    </name>
    <name value="diffusion">
      <type>bool</type>
      <default>False</default>
      <doc>Add or not a diffusion term on tracer. Diffusion is applied only on 'tracer' fields, i.e. the ones that are advected. If True, the value for the diffusion coefficient is set in param.Kdiff</doc>
    </name>
    <name value="customized">
      <type>bool</type>
      <default>False</default>
      <doc>Customize the time step. If activated you should provide the name of the custom module</doc>
    </name>
    <name value="Kdiff">
      <type>float</type>
      <default>0.</default>
      <doc>Diffusion coefficient. Has to be set manually. It should depends on the resolution. The code allows to have different diffusion coefficients  for each tracer. The diffusion term is a Laplacian.</doc>
    </name>
    <name value="noslip">
      <type>bool</type>
      <default>False</default>
      <doc>Add a noslip condition along the boundaries</doc>
    </name>
    <name value="ageostrophic">
      <type>bool</type>
      <default>False</default>
      <doc>Activate the diagnostic of the ageostrophic velocity ('qg' model)</doc>
    </name>
    <name value="bottom_torque">
      <type>bool</type>
      <default>False</default>
      <doc>Activate the diagnostic of the bottom torque ('qg' model)</doc>
    </name>
    <name value="forcing">
      <type>bool</type>
      <default>False</default>
      <doc>Activate a forcing. This requires to define and set a forcing in the python file. Alternatively, provide the name of the forcing routine as forcing_module.</doc>
    </name>
    <name value="forcing_module">
      <type>str</type>
      <default>embedded</default>
      <doc>If the forcing is not defined in the same file as the experiment (i.e. 'embedded'), provide the name of your forcing module (python script). It should be in the same folder as the python file of your experiment and must provide a class Forcing.</doc>
    </name>
    <name value="decay">
      <type>bool</type>
      <default>True</default>
      <doc>If True, warns when kinetic energy increases between two time steps (only for Euler model)</doc>
    </name>
    <name value="enforce_momentum">
      <type>bool</type>
      <default>False</default>
      <doc>Enforce the global momentum conservation in closed domain in unforced case ('euler' model only)</doc>
    </name>
    <name value="spongelayer">
      <type>bool</type>
      <default>False</default>
      <doc>Add a sponge layer, works only for the von karman experiment</doc>
    </name>
  </parameters>


</Fluid2D>
